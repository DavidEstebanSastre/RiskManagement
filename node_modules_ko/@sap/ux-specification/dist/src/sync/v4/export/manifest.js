"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ux_specification_types_1 = require("@sap/ux-specification-types");
var Constants;
(function (Constants) {
    Constants["OptionalQuery"] = ":?query:";
    Constants["Component"] = "sap/fe/AppComponent";
    Constants["Namespace"] = "sap.fe.templates";
})(Constants = exports.Constants || (exports.Constants = {}));
/**
 * Transform Pages(from app.json) to UI5 routing configuration(manifest.json)
 * @param routing UI5 routing configuration
 */
const createRoute = (pattern, name, target) => {
    return {
        pattern,
        name,
        target
    };
};
/**
 * Method returns SapUi5RoutingTargetBase.options object.
 * @param {string} [entitySet] - Entity set.
 * @param {string} [variantManagement] - Variant management string.
 * @return {{settings: SapUi5RoutingTargetSettings}} Returns object for SapUi5RoutingTargetBase.options.
 */
const createTargetOption = (entitySet, variantManagement) => {
    return {
        settings: Object.assign(Object.assign(Object.assign({}, (entitySet && { entitySet })), (variantManagement && { variantManagement })), { navigation: {} })
    };
};
function initializeRouting(manifestRouting) {
    let routing = manifestRouting;
    if (!routing) {
        routing = {
            routes: [],
            targets: {}
        };
    }
    else {
        if (!routing.routes) {
            routing.routes = [];
        }
        if (!routing.targets) {
            routing.targets = {};
        }
    }
    return routing;
}
function setTargetOptions(target, keyInManifest, navigationEntry) {
    if (!target.options) {
        target.options = createTargetOption();
    }
    if (!target.options.settings) {
        target.options.settings = {};
    }
    if (!target.options.settings.navigation) {
        target.options.settings.navigation = {};
    }
    target.options.settings.navigation[keyInManifest] = {
        detail: navigationEntry
    };
}
function calculateQueryPattern(parts, pages) {
    let pattern = '';
    parts.forEach((part, index) => {
        const targetPage = pages[part];
        let key = '';
        if ((targetPage === null || targetPage === void 0 ? void 0 : targetPage.pageType) !== ux_specification_types_1.PageTypeV4.ListReport) {
            // Keys should be like - 'key', 'key2', 'key3'
            key = `({key${index ? index + 1 : ''}})`;
        }
        const partToInsert = targetPage.entitySet ? targetPage.entitySet : part;
        pattern += `${pattern ? '/' : ''}${partToInsert}${key}`;
    });
    return pattern;
}
function handlePageNavigation(page, pages, target, routing) {
    if (page.navigation) {
        for (const keyInManifest in page.navigation) {
            const navigationEntry = page.navigation[keyInManifest];
            setTargetOptions(target, keyInManifest, navigationEntry);
            if (navigationEntry === null || navigationEntry === void 0 ? void 0 : navigationEntry['route']) {
                const parts = navigationEntry['route'].split('.');
                if (!routing.routes.some((routingRoute) => routingRoute.name === navigationEntry['route'])) {
                    const pattern = calculateQueryPattern(parts, pages);
                    // Make sure there no route duplication
                    routing.routes.push(createRoute(`${pattern}${Constants.OptionalQuery}`, navigationEntry['route'], navigationEntry['route']));
                }
            }
        }
    }
}
function removeDeletedPages(routing, pages) {
    for (const id in routing.targets) {
        if (!pages || !pages[id]) {
            // Remove target
            delete routing.targets[id];
            // Remove routes
            const index = routing.routes.findIndex((route) => route.name === id);
            if (index !== -1) {
                routing.routes.splice(index, 1);
            }
        }
    }
}
function transferEntitySet(page, target) {
    var _a, _b;
    if (page.entitySet) {
        if (!target.options) {
            target.options = createTargetOption(page.entitySet, page.variantManagement);
        }
        target.options.settings.entitySet = page.entitySet;
    }
    else {
        (_b = (_a = target.options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? true : delete _b.entitySet;
    }
}
/**
 * Method detects removed custom sections and deletes removed custom sections from manifest.
 * @param page current page
 * @param target routing target to be filled
 */
function deleteRemovedCustomSections(page, target) {
    var _a, _b, _c, _d, _e;
    // Delete removed custom sections
    const manifestSections = (_d = (_c = (_b = (_a = target === null || target === void 0 ? void 0 : target.options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.sections;
    if (page.pageType === ux_specification_types_1.PageTypeV4.ObjectPage && manifestSections && typeof manifestSections === 'object') {
        const objectPage = page.config;
        const customSections = Array.isArray((_e = objectPage === null || objectPage === void 0 ? void 0 : objectPage.sections) === null || _e === void 0 ? void 0 : _e.custom) ? objectPage.sections.custom : [];
        const latestIds = customSections.map((section) => section.id);
        const existingIds = Object.keys(manifestSections);
        for (const id of existingIds) {
            if (!latestIds.includes(id)) {
                // Delete removed custom section
                delete manifestSections[id];
            }
        }
    }
}
function updateRoute(routing, id, page) {
    const route = routing.routes.find((routingRoute) => routingRoute.name === id);
    if (route) {
        if (page.defaultLayoutType) {
            route.layout = page.defaultLayoutType;
        }
        else {
            delete route.layout;
        }
    }
}
/**
 * Fills target with page information
 * @param page current page
 * @param target routing target to be filled
 * @param id page id
 * @param pages all pages of app.json
 * @returns filled target
 */
function fillTarget(page, target, id, pages) {
    if (page.pageType && page.pageType !== ux_specification_types_1.PageTypeV4.CustomPage) {
        target = Object.assign(Object.assign({}, target), {
            type: 'Component',
            id: (target === null || target === void 0 ? void 0 : target['id']) || id,
            name: `${Constants.Namespace}.${pages[id].pageType}`
        });
    }
    else if (page.view &&
        !!target &&
        (target.viewName ||
            target.viewId)) {
        // Existing old syntax for Custom Page
        target = Object.assign(Object.assign({}, target), {
            viewId: page.view.id,
            viewName: page.view.name,
            path: page.view.path,
            viewType: page.view.viewType
        });
    }
    else if (page.view) {
        target = Object.assign(Object.assign({}, target), {
            type: 'Component',
            id: page.view.id,
            name: `${ux_specification_types_1.v4.FE_TEMPLATE_V4_CUSTOM_PAGE}`,
            viewType: page.view.viewType,
            options: {
                settings: {
                    viewName: page.view.name
                }
            }
        });
    }
    return target;
}
/**
 * Transform Pages(from app.json) to UI5 routing configuration (manifest.json)
 * @param routing UI5 routing configuration
 */
function transformRoutingV4(homePage, pages, manifest) {
    var _a, _b;
    const routing = initializeRouting(manifest[ux_specification_types_1.ManifestSection.ui5].routing);
    // add default route
    if (homePage && !routing.routes.some((route) => route.name === homePage)) {
        // Make sure there no route duplication
        routing.routes.push(createRoute(Constants.OptionalQuery, homePage, homePage));
    }
    for (const id in pages) {
        let target;
        const page = pages[id];
        if (routing.targets[id]) {
            target = routing.targets[id];
        }
        target = fillTarget(page, target, id, pages);
        transferEntitySet(page, target);
        deleteRemovedCustomSections(page, target);
        if (target && !page.controlAggregation) {
            delete target.contextPattern;
            delete target.controlAggregation;
        }
        if ((_b = (_a = target === null || target === void 0 ? void 0 : target.options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.navigation) {
            // We handle page 'navigation' from scratch - clear 'navigation' before handling
            target.options.settings.navigation = {};
        }
        // Handle page 'navigation'
        handlePageNavigation(page, pages, target, routing);
        // Update associated route with layout information
        updateRoute(routing, id, page);
        routing.targets[id] = target;
    }
    // Remove deleted pages
    removeDeletedPages(routing, pages);
    return routing;
}
exports.transformRoutingV4 = transformRoutingV4;
//# sourceMappingURL=manifest.js.map