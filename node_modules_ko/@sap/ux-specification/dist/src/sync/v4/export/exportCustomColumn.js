"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../../api");
const apiTypes_1 = require("../../../apiTypes");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
const types_1 = require("../../common/types");
const utils_1 = require("./utils");
/**
 * Function creates a new custom column with aid of the FPM writer
 * @param propertyDefinition - Definition of the given property in JSON schema
 * @param breadcrumbs - array of sequence of properties that we are currently processing.
 * @param {TransferParameterTypeV4} transferParameters - list of parameters passed from API
 * @param configObject - current object in the configuration
 * @returns {boolean} - true if a new column was created
 */
function createNewCustomColumn(propertyKey, transferParameters, configObject, logger, breadcrumbs) {
    if (!configObject) {
        return false;
    }
    if (!transferParameters.appRootPath) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOBASEPATH', { appId: transferParameters.appId })
        });
        return false;
    }
    if (configObject.template && configObject.template.indexOf(propertyKey) === -1) {
        //Existing fragment which does not fit to FPM writer syntax
        return false;
    }
    const sectionsIndex = breadcrumbs.lastIndexOf(types_1.PropertyName.sections);
    const sectionId = sectionsIndex > -1 ? utils_1.extractLastIdPart(breadcrumbs[sectionsIndex + 1]) : undefined;
    const entityInManifest = sectionId ? sectionId.replace(/::/g, '/') : `@${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}`;
    const handler = configObject.eventHandler === true ? true : undefined;
    const data = Object.assign(Object.assign(Object.assign(Object.assign({ target: transferParameters.pageNameArray[0], targetEntity: entityInManifest, position: configObject.position, name: propertyKey }, (configObject.header && { header: configObject.header })), (configObject.width && { width: configObject.width })), (configObject.availability && { availability: configObject.availability })), (handler && { eventHandler: handler }));
    const columnApiParams = {
        customExtension: apiTypes_1.CustomExtensionType.CustomColumn,
        basePath: transferParameters.appRootPath,
        data
    };
    api_1.generateCustomExtension(columnApiParams);
    return true;
}
exports.createNewCustomColumn = createNewCustomColumn;
//# sourceMappingURL=exportCustomColumn.js.map